package org.example;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;
import java.awt.Color;

public class MainUI {
    private JPanel MainPage;
    private JLabel pageTitle;
    private JTextField margines;
    private JLabel instructionNumCuts;
    private JTextField numCuts;
    private JLabel instructionMargines;
    private JSpinner spinnerNumCuts;
    private JSpinner spinnerMargines; // Add this field
    private JButton buttonPodziel;
    private JPanel graphPanelPlaceholder;
    private JLabel successfulCuts;
    private JButton resetujWidokButton;
    private JLabel questionIsGraphBalanced;
    private JLabel isGraphBalanced;  // pole klasy

    private void updateLabelColor(boolean balanced) {
        isGraphBalanced.setForeground(balanced ? Color.GREEN : Color.RED);
        isGraphBalanced.setText(balanced ? "TAK" : "NIE");

    }

    public MainUI() {
        $$$setupUI$$$();
        if (MainPage == null) {
            MainPage = new JPanel();
            MainPage.add(new JLabel("Default Panel Content"));
        }

        // Konfiguracja spinnera dla liczby podziałów
        SpinnerNumberModel spinnerNumCutsModel = new SpinnerNumberModel(1, 0, Integer.MAX_VALUE, 1);
        spinnerNumCuts.setModel(spinnerNumCutsModel);

        // Konfiguracja spinnera dla marginesu
        SpinnerNumberModel spinnerMarginesModel = new SpinnerNumberModel(10, 0, 100, 1);
        spinnerMargines.setModel(spinnerMarginesModel); // Use the class field instead of finding by index
    }

    public JPanel getPanel() {
        return MainPage;
    }

    private void createUIComponents() {
        MainPage = new JPanel();
        pageTitle = new JLabel();
        margines = new JTextField();
        instructionNumCuts = new JLabel();
        numCuts = new JTextField();
        instructionMargines = new JLabel();
        buttonPodziel = new JButton();

        // Initialize both spinners
        spinnerNumCuts = new JSpinner();
        spinnerMargines = new JSpinner();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        MainPage.setLayout(new GridBagLayout());
        MainPage.setAutoscrolls(true);
        Font MainPageFont = this.$$$getFont$$$(null, -1, 20, MainPage.getFont());
        if (MainPageFont != null) MainPage.setFont(MainPageFont);
        MainPage.setForeground(new Color(-5306302));
        MainPage.setRequestFocusEnabled(false);
        graphPanelPlaceholder = new JPanel();
        graphPanelPlaceholder.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.gridheight = 6;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        MainPage.add(graphPanelPlaceholder, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        MainPage.add(panel1, gbc);
        instructionNumCuts = new JLabel();
        instructionNumCuts.setAlignmentY(0.5f);
        instructionNumCuts.setForeground(new Color(-4516742));
        instructionNumCuts.setHorizontalAlignment(10);
        instructionNumCuts.setHorizontalTextPosition(11);
        instructionNumCuts.setText("liczba przecięć");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 20);
        panel1.add(instructionNumCuts, gbc);
        final JButton button1 = new JButton();
        button1.setBackground(new Color(-2192736));
        button1.setForeground(new Color(-5306302));
        button1.setText("Podziel\uD83D\uDE3C");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 9;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.NORTH;
        panel1.add(button1, gbc);
        instructionMargines = new JLabel();
        instructionMargines.setForeground(new Color(-4516742));
        instructionMargines.setText("margines %");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 20);
        panel1.add(instructionMargines, gbc);
        spinnerMargines = new JSpinner();
        spinnerMargines.setAutoscrolls(false);
        spinnerMargines.setBackground(new Color(-2192736));
        spinnerMargines.setForeground(new Color(-5306302));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 20);
        panel1.add(spinnerMargines, gbc);
        spinnerNumCuts = new JSpinner();
        spinnerNumCuts.setAutoscrolls(false);
        spinnerNumCuts.setBackground(new Color(-2192736));
        spinnerNumCuts.setForeground(new Color(-5306302));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 20);
        panel1.add(spinnerNumCuts, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel1.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel1.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel1.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 8;
        gbc.fill = GridBagConstraints.VERTICAL;
        gbc.insets = new Insets(0, 0, 5, 0);
        panel1.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel1.add(spacer5, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(spacer6, gbc);
        final JPanel spacer7 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 1050, 0, 0);
        MainPage.add(spacer7, gbc);
        pageTitle = new JLabel();
        Font pageTitleFont = this.$$$getFont$$$(null, -1, 20, pageTitle.getFont());
        if (pageTitleFont != null) pageTitle.setFont(pageTitleFont);
        pageTitle.setForeground(new Color(-4516742));
        pageTitle.setHorizontalAlignment(0);
        pageTitle.setHorizontalTextPosition(0);
        pageTitle.setIconTextGap(4);
        pageTitle.setText("aplikacja do podziału grafu \uD83D\uDC31 ");
        pageTitle.setVerifyInputWhenFocusTarget(false);
        pageTitle.setVerticalTextPosition(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTH;
        MainPage.add(pageTitle, gbc);
        successfulCuts = new JLabel();
        successfulCuts.setText("...");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 20);
        MainPage.add(successfulCuts, gbc);
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-16098304));
        label1.setText("liczba udanych przecięć grafu");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 20);
        MainPage.add(label1, gbc);
        resetujWidokButton = new JButton();
        resetujWidokButton.setBackground(new Color(-2192736));
        resetujWidokButton.setForeground(new Color(-5306302));
        resetujWidokButton.setText("resetuj widok");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.SOUTH;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        MainPage.add(resetujWidokButton, gbc);
        questionIsGraphBalanced = new JLabel();
        questionIsGraphBalanced.setForeground(new Color(-4488797));
        questionIsGraphBalanced.setText("czy graf jest spójny?");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 20);
        MainPage.add(questionIsGraphBalanced, gbc);
        isGraphBalanced = new JLabel();
        isGraphBalanced.setRequestFocusEnabled(true);
        isGraphBalanced.setText("...");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 0, 20);
        MainPage.add(isGraphBalanced, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPage;
    }

}