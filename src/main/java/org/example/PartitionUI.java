package org.example;
import org.example.GraphVisualisation.GraphPostPartitionPanel;
import org.example.model.PartitionResult;
import org.example.model.Graph;  // Dodaj ten import w PartitionUI
import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.awt.geom.Point2D;

public class PartitionUI {
    private JPanel visualisationPanel;
    private JButton partitionBackButton;
    private JPanel graphPostPartitionPanelPlaceholder; // zmień typ na JPanel
    private JPanel infoPanel;
    private JLabel viewZoomInfo;
    private JPanel graphDrawPanel;
    private List<PartitionResult.PartitionInfo> currentResults;
    private Map<Integer, Point2D> savedPositions = new HashMap<>();

    public void setGraph(Graph graph, List<PartitionResult.PartitionInfo> partitions) {
        if (graphPostPartitionPanelPlaceholder instanceof GraphPostPartitionPanel) {
            GraphPostPartitionPanel panel = (GraphPostPartitionPanel) graphPostPartitionPanelPlaceholder;

            // Ustaw zapisane pozycje tylko jeśli są dostępne i pasują do grafu
            if (!savedPositions.isEmpty() && graph != null &&
                    savedPositions.size() == graph.getNumVertices()) {
                panel.setVertexPositions(savedPositions);
            }

            panel.setGraph(graph, partitions);

            // Zapisz nowe pozycje
            savedPositions = panel.getVertexPositions();
        }
    }

    public void clearVisualization() {
        if (graphPostPartitionPanelPlaceholder != null) {
            savedPositions.clear(); // Wyczyść zapisane pozycje
            graphPostPartitionPanelPlaceholder.removeAll();
            graphPostPartitionPanelPlaceholder.revalidate();
            graphPostPartitionPanelPlaceholder.repaint();
        }
        currentResults = null;
    }

    public void updateViewZoomInfo(double zoomLevel, int visibleVertices, int totalVertices) {
        if (viewZoomInfo != null) {
            String info = String.format("Zoom: %.1fx | Widoczne: %d/%d",
                    zoomLevel, visibleVertices, totalVertices);
            viewZoomInfo.setText(info);
        }
    }


    public PartitionUI() {
        $$$setupUI$$$();

        // Zamień placeholder na właściwy panel
        GraphPostPartitionPanel realPanel = new GraphPostPartitionPanel();
        realPanel.setLayout(new GridBagLayout());
        graphDrawPanel.remove(graphPostPartitionPanelPlaceholder);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        
        graphDrawPanel.add(realPanel, gbc);
        graphPostPartitionPanelPlaceholder = realPanel;
        realPanel.setPartitionUI(this);
    }

    public JPanel getPanel() {
        return visualisationPanel;
    }

    public JButton getpartitionBackButton() {
        return partitionBackButton;
    }

    public GraphPostPartitionPanel getGraphPostPartitionPanel() {
        return (GraphPostPartitionPanel) graphPostPartitionPanelPlaceholder;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        visualisationPanel = new JPanel();
        visualisationPanel.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        visualisationPanel.add(panel1, gbc);
        infoPanel = new JPanel();
        infoPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(infoPanel, gbc);
        partitionBackButton = new JButton();
        partitionBackButton.setForeground(new Color(-4488797));
        partitionBackButton.setText("Powrót do ekranu głównego");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        infoPanel.add(partitionBackButton, gbc);
        viewZoomInfo = new JLabel();
        viewZoomInfo.setForeground(new Color(-4516742));
        viewZoomInfo.setText("Zoom: 1.0x | Widoczne: 0/0");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 10.0;
        infoPanel.add(viewZoomInfo, gbc);
        graphDrawPanel = new JPanel();
        graphDrawPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        visualisationPanel.add(graphDrawPanel, gbc);
        graphPostPartitionPanelPlaceholder = new JPanel();
        graphPostPartitionPanelPlaceholder.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        graphDrawPanel.add(graphPostPartitionPanelPlaceholder, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return visualisationPanel;
    }


}