package org.example;
import org.example.GraphVisualisation.GraphPostPartitionPanel;
import org.example.model.PartitionResult;
import org.example.model.Graph;  // Dodaj ten import w PartitionUI
import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.awt.geom.Point2D;

public class PartitionUI {
    private JPanel visualisationPanel;
    private JButton partitionBackButton;
    private GraphPostPartitionPanel graphPostPartitionPanelPlaceholder;
    private List<PartitionResult.PartitionInfo> currentResults;
    private Map<Integer, Point2D> savedPositions = new HashMap<>();

    public void setGraph(Graph graph, List<PartitionResult.PartitionInfo> partitions) {
        if (graphPostPartitionPanelPlaceholder instanceof GraphPostPartitionPanel) {
            GraphPostPartitionPanel panel = (GraphPostPartitionPanel) graphPostPartitionPanelPlaceholder;
            
            // Ustaw zapisane pozycje tylko jeśli są dostępne i pasują do grafu
            if (!savedPositions.isEmpty() && graph != null && 
                savedPositions.size() == graph.getNumVertices()) {
                panel.setVertexPositions(savedPositions);
            }
            
            panel.setGraph(graph, partitions);
            
            // Zapisz nowe pozycje
            savedPositions = panel.getVertexPositions();
        }
    }

    public void clearVisualization() {
        if (graphPostPartitionPanelPlaceholder != null) {
            savedPositions.clear(); // Wyczyść zapisane pozycje
            graphPostPartitionPanelPlaceholder.removeAll();
            graphPostPartitionPanelPlaceholder.revalidate();
            graphPostPartitionPanelPlaceholder.repaint();
        }
        currentResults = null;
    }



    public PartitionUI() {
        // Usuń extends JDialog, ponieważ używamy teraz CardLayout
        $$$setupUI$$$();
    }

    public JPanel getPanel() {
        return visualisationPanel;
    }

    public JButton getpartitionBackButton() {
        return partitionBackButton;
    }

    public GraphPostPartitionPanel getGraphPostPartitionPanel() {
        return (GraphPostPartitionPanel) graphPostPartitionPanelPlaceholder;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        visualisationPanel = new JPanel();
        visualisationPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        visualisationPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        partitionBackButton = new JButton();
        partitionBackButton.setForeground(new Color(-4488797));
        partitionBackButton.setText("Powrót do ekranu głównego");
        panel2.add(partitionBackButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        visualisationPanel.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        graphPostPartitionPanelPlaceholder = new GraphPostPartitionPanel();
        graphPostPartitionPanelPlaceholder.setLayout(new GridBagLayout());
        panel3.add(graphPostPartitionPanelPlaceholder, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return visualisationPanel;
    }


}